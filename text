import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  Modal,
  TouchableOpacity,
  StyleSheet,
  ScrollView,
  TextInput,
  Alert,
  Dimensions,
} from 'react-native';
// import DatePicker from 'react-native-date-picker';

const { width, height } = Dimensions.get('window');

const SetupInfoModal = ({ visible, onClose, onComplete }) => {
  const [currentStep, setCurrentStep] = useState(1);
  const [showDatePicker, setShowDatePicker] = useState(false);

  // Step 1 - Health Information
  const [healthInfo, setHealthInfo] = useState({
    dateOfBirth: new Date(),
    gender: '',
    height: '',
    weight: '',
    bmi: 0,
  });

  // Step 2 - Medical History & Lifestyle
  const [medicalInfo, setMedicalInfo] = useState({
    cardiovascularDiseases: [],
    otherConditions: [],
    currentMedications: [],
    allergies: [],
    smokingStatus: 'never',
  });

  const [newMedication, setNewMedication] = useState({
    name: '',
    type: '',
    dosage: '',
    frequency: '',
    startDate: new Date(),
  });

  const [newAllergy, setNewAllergy] = useState('');

  // Calculate BMI automatically
  useEffect(() => {
    if (healthInfo.height && healthInfo.weight) {
      const heightInMeters = healthInfo.height / 100;
      const bmi = healthInfo.weight / (heightInMeters * heightInMeters);
      setHealthInfo(prev => ({ ...prev, bmi: Math.round(bmi * 10) / 10 }));
    }
  }, [healthInfo.height, healthInfo.weight]);

  const genderOptions = [
    { label: 'Nam', value: 'male' },
    { label: 'Nữ', value: 'female' },
    { label: 'Khác', value: 'other' },
  ];

  const cardiovascularOptions = [
    { label: 'Tăng huyết áp', value: 'hypertension' },
    { label: 'Bệnh động mạch vành', value: 'coronary_artery_disease' },
    { label: 'Suy tim', value: 'heart_failure' },
    { label: 'Loạn nhịp tim', value: 'arrhythmia' },
    { label: 'Đột quỵ', value: 'stroke' },
    { label: 'Bệnh động mạch ngoại vi', value: 'peripheral_artery_disease' },
  ];

  const otherConditionsOptions = [
    { label: 'Tiểu đường type 1', value: 'diabetes_type1' },
    { label: 'Tiểu đường type 2', value: 'diabetes_type2' },
    { label: 'Bệnh thận', value: 'kidney_disease' },
    { label: 'Ngưng thở khi ngủ', value: 'sleep_apnea' },
    { label: 'Rối loạn tuyến giáp', value: 'thyroid_disorder' },
    { label: 'Béo phì', value: 'obesity' },
  ];

  const medicationTypes = [
    { label: 'Thuốc huyết áp', value: 'bp_med' },
    { label: 'Thuốc tiểu đường', value: 'diabetes_med' },
    { label: 'Thuốc tim', value: 'heart_med' },
    { label: 'Khác', value: 'other' },
  ];

  const smokingOptions = [
    { label: 'Không hút', value: 'never' },
    { label: 'Đã bỏ', value: 'former' },
    { label: 'Còn hút', value: 'current' },
  ];

  const toggleSelection = (array, value, setter) => {
    const newArray = array.includes(value)
      ? array.filter(item => item !== value)
      : [...array, value];
    setter(prev => ({
      ...prev,
      [array === medicalInfo.cardiovascularDiseases
        ? 'cardiovascularDiseases'
        : 'otherConditions']: newArray,
    }));
  };

  const addMedication = () => {
    if (!newMedication.name.trim()) {
      Alert.alert('Thông báo', 'Vui lòng nhập tên thuốc');
      return;
    }
    setMedicalInfo(prev => ({
      ...prev,
      currentMedications: [...prev.currentMedications, { ...newMedication }],
    }));
    setNewMedication({
      name: '',
      type: '',
      dosage: '',
      frequency: '',
      startDate: new Date(),
    });
  };

  const removeMedication = index => {
    setMedicalInfo(prev => ({
      ...prev,
      currentMedications: prev.currentMedications.filter((_, i) => i !== index),
    }));
  };

  const addAllergy = () => {
    if (!newAllergy.trim()) return;
    setMedicalInfo(prev => ({
      ...prev,
      allergies: [...prev.allergies, newAllergy.trim()],
    }));
    setNewAllergy('');
  };

  const removeAllergy = index => {
    setMedicalInfo(prev => ({
      ...prev,
      allergies: prev.allergies.filter((_, i) => i !== index),
    }));
  };

  const validateStep1 = () => {
    if (!healthInfo.gender || !healthInfo.height || !healthInfo.weight) {
      Alert.alert('Thông báo', 'Vui lòng điền đầy đủ thông tin bắt buộc');
      return false;
    }
    if (healthInfo.height < 100 || healthInfo.height > 250) {
      Alert.alert('Thông báo', 'Chiều cao phải từ 100-250cm');
      return false;
    }
    if (healthInfo.weight < 30 || healthInfo.weight > 300) {
      Alert.alert('Thông báo', 'Cân nặng phải từ 30-300kg');
      return false;
    }
    return true;
  };

  const handleComplete = () => {
    const completeData = {
      ...healthInfo,
      ...medicalInfo,
    };
    onComplete(completeData);
    onClose();
  };

  const renderStep1 = () => (
    <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>
      <Text style={styles.stepTitle}>Thông tin cơ bản</Text>

      {/* Date of Birth */}
      <View style={styles.section}>
        <Text style={styles.label}>Ngày sinh</Text>
        <TouchableOpacity
          style={styles.dateInput}
          onPress={() => setShowDatePicker(true)}
        >
          <Text style={styles.dateText}>
            {healthInfo.dateOfBirth.toLocaleDateString('vi-VN')}
          </Text>
        </TouchableOpacity>
      </View>

      {/* Gender */}
      <View style={styles.section}>
        <Text style={styles.label}>Giới tính</Text>
        <View style={styles.genderRow}>
          {genderOptions.map(option => (
            <TouchableOpacity
              key={option.value}
              style={[
                styles.genderButton,
                healthInfo.gender === option.value && styles.selectedGender,
              ]}
              onPress={() =>
                setHealthInfo(prev => ({ ...prev, gender: option.value }))
              }
            >
              <Text
                style={[
                  styles.genderText,
                  healthInfo.gender === option.value &&
                    styles.selectedGenderText,
                ]}
              >
                {option.label}
              </Text>
            </TouchableOpacity>
          ))}
        </View>
      </View>

      {/* Height & Weight */}
      <View style={styles.twoColumnSection}>
        <View style={styles.halfSection}>
          <Text style={styles.label}>Chiều cao (cm)</Text>
          <TextInput
            style={styles.numberInput}
            value={healthInfo.height.toString()}
            onChangeText={text =>
              setHealthInfo(prev => ({ ...prev, height: parseInt(text) || '' }))
            }
            keyboardType="numeric"
            placeholder="160"
            placeholderTextColor="#999"
          />
        </View>

        <View style={styles.halfSection}>
          <Text style={styles.label}>Cân nặng (kg)</Text>
          <TextInput
            style={styles.numberInput}
            value={healthInfo.weight.toString()}
            onChangeText={text =>
              setHealthInfo(prev => ({ ...prev, weight: parseInt(text) || '' }))
            }
            keyboardType="numeric"
            placeholder="65"
            placeholderTextColor="#999"
          />
        </View>
      </View>

      {/* BMI Display */}
      {healthInfo.bmi > 0 && (
        <View style={styles.bmiSection}>
          <Text style={styles.bmiTitle}>Chỉ số BMI</Text>
          <View style={styles.bmiCard}>
            <Text style={styles.bmiValue}>{healthInfo.bmi}</Text>
            <Text style={styles.bmiStatus}>
              {healthInfo.bmi < 18.5
                ? 'Thiếu cân'
                : healthInfo.bmi < 25
                ? 'Bình thường'
                : healthInfo.bmi < 30
                ? 'Thừa cân'
                : 'Béo phì'}
            </Text>
          </View>
        </View>
      )}

      {/* <DatePicker
        modal
        open={showDatePicker}
        date={healthInfo.dateOfBirth}
        mode="date"
        maximumDate={new Date()}
        onConfirm={date => {
          setShowDatePicker(false);
          setHealthInfo(prev => ({...prev, dateOfBirth: date}));
        }}
        onCancel={() => setShowDatePicker(false)}
      /> */}
    </ScrollView>
  );

  const renderStep2 = () => (
    <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>
      <Text style={styles.stepTitle}>Thông tin sức khỏe</Text>

      {/* Cardiovascular Diseases */}
      <View style={styles.section}>
        <Text style={styles.label}>Bệnh tim mạch (nếu có)</Text>
        <Text style={styles.subtitle}>Chọn các bệnh bạn đang mắc phải</Text>
        <View style={styles.checkboxGrid}>
          {cardiovascularOptions.map(option => (
            <TouchableOpacity
              key={option.value}
              style={[
                styles.checkboxItem,
                medicalInfo.cardiovascularDiseases.includes(option.value) &&
                  styles.checkedItem,
              ]}
              onPress={() =>
                toggleSelection(
                  medicalInfo.cardiovascularDiseases,
                  option.value,
                  setMedicalInfo,
                )
              }
            >
              <Text
                style={[
                  styles.checkboxText,
                  medicalInfo.cardiovascularDiseases.includes(option.value) &&
                    styles.checkedText,
                ]}
              >
                {option.label}
              </Text>
            </TouchableOpacity>
          ))}
        </View>
      </View>

      {/* Other Conditions */}
      <View style={styles.section}>
        <Text style={styles.label}>Bệnh khác (nếu có)</Text>
        <Text style={styles.subtitle}>Chọn các bệnh bạn đang mắc phải</Text>
        <View style={styles.checkboxGrid}>
          {otherConditionsOptions.map(option => (
            <TouchableOpacity
              key={option.value}
              style={[
                styles.checkboxItem,
                medicalInfo.otherConditions.includes(option.value) &&
                  styles.checkedItem,
              ]}
              onPress={() =>
                toggleSelection(
                  medicalInfo.otherConditions,
                  option.value,
                  setMedicalInfo,
                )
              }
            >
              <Text
                style={[
                  styles.checkboxText,
                  medicalInfo.otherConditions.includes(option.value) &&
                    styles.checkedText,
                ]}
              >
                {option.label}
              </Text>
            </TouchableOpacity>
          ))}
        </View>
      </View>

      {/* Current Medications */}
      <View style={styles.section}>
        <Text style={styles.label}>Thuốc đang dùng</Text>
        <Text style={styles.subtitle}>
          Thêm các loại thuốc bạn đang sử dụng
        </Text>

        <View style={styles.medicationForm}>
          <TextInput
            style={styles.textInput}
            value={newMedication.name}
            onChangeText={text =>
              setNewMedication(prev => ({ ...prev, name: text }))
            }
            placeholder="Tên thuốc (ví dụ: Amlodipine)"
            placeholderTextColor="#999"
          />

          <View style={styles.medicationTypeRow}>
            <Text style={styles.miniLabel}>Loại thuốc:</Text>
            <View style={styles.typeButtons}>
              {medicationTypes.map(type => (
                <TouchableOpacity
                  key={type.value}
                  style={[
                    styles.typeButton,
                    newMedication.type === type.value && styles.selectedType,
                  ]}
                  onPress={() =>
                    setNewMedication(prev => ({ ...prev, type: type.value }))
                  }
                >
                  <Text
                    style={[
                      styles.typeText,
                      newMedication.type === type.value &&
                        styles.selectedTypeText,
                    ]}
                  >
                    {type.label}
                  </Text>
                </TouchableOpacity>
              ))}
            </View>
          </View>

          <View style={styles.dosageRow}>
            <TextInput
              style={[styles.textInput, styles.dosageInput]}
              value={newMedication.dosage}
              onChangeText={text =>
                setNewMedication(prev => ({ ...prev, dosage: text }))
              }
              placeholder="Liều dùng"
              placeholderTextColor="#999"
            />
            <TextInput
              style={[styles.textInput, styles.dosageInput]}
              value={newMedication.frequency}
              onChangeText={text =>
                setNewMedication(prev => ({ ...prev, frequency: text }))
              }
              placeholder="Tần suất"
              placeholderTextColor="#999"
            />
          </View>

          <TouchableOpacity style={styles.addMedButton} onPress={addMedication}>
            <Text style={styles.addMedButtonText}>+ Thêm thuốc</Text>
          </TouchableOpacity>
        </View>

        {/* Medication List */}
        {medicalInfo.currentMedications.map((med, index) => (
          <View key={index} style={styles.medicationCard}>
            <View style={styles.medInfo}>
              <Text style={styles.medName}>{med.name}</Text>
              <Text style={styles.medDetails}>
                {med.dosage} - {med.frequency}
              </Text>
            </View>
            <TouchableOpacity
              style={styles.removeButton}
              onPress={() => removeMedication(index)}
            >
              <Text style={styles.removeText}>Xóa</Text>
            </TouchableOpacity>
          </View>
        ))}
      </View>

      {/* Allergies */}
      <View style={styles.section}>
        <Text style={styles.label}>Dị ứng thuốc</Text>
        <Text style={styles.subtitle}>Các loại thuốc bạn bị dị ứng</Text>
        <View style={styles.allergyInputRow}>
          <TextInput
            style={[styles.textInput, styles.allergyInput]}
            value={newAllergy}
            onChangeText={setNewAllergy}
            placeholder="Tên thuốc dị ứng"
            placeholderTextColor="#999"
          />
          <TouchableOpacity
            style={styles.addAllergyButton}
            onPress={addAllergy}
          >
            <Text style={styles.addAllergyText}>Thêm</Text>
          </TouchableOpacity>
        </View>

        <View style={styles.allergyTags}>
          {medicalInfo.allergies.map((allergy, index) => (
            <View key={index} style={styles.allergyTag}>
              <Text style={styles.allergyTagText}>{allergy}</Text>
              <TouchableOpacity
                style={styles.removeTagButton}
                onPress={() => removeAllergy(index)}
              >
                <Text style={styles.removeTagText}>×</Text>
              </TouchableOpacity>
            </View>
          ))}
        </View>
      </View>

      {/* Smoking Status */}
      <View style={styles.section}>
        <Text style={styles.label}>Tình trạng hút thuốc</Text>
        <View style={styles.smokingRow}>
          {smokingOptions.map(option => (
            <TouchableOpacity
              key={option.value}
              style={[
                styles.smokingButton,
                medicalInfo.smokingStatus === option.value &&
                  styles.selectedSmoking,
              ]}
              onPress={() =>
                setMedicalInfo(prev => ({
                  ...prev,
                  smokingStatus: option.value,
                }))
              }
            >
              <Text
                style={[
                  styles.smokingText,
                  medicalInfo.smokingStatus === option.value &&
                    styles.selectedSmokingText,
                ]}
              >
                {option.label}
              </Text>
            </TouchableOpacity>
          ))}
        </View>
      </View>
    </ScrollView>
  );

  return (
    <Modal
      visible={visible}
      animationType="slide"
      presentationStyle="pageSheet"
    >
      <View style={styles.container}>
        {/* Header */}
        <View style={styles.header}>
          <TouchableOpacity style={styles.closeButton} onPress={onClose}>
            <Text style={styles.closeText}>Đóng</Text>
          </TouchableOpacity>
          <Text style={styles.headerTitle}>Thiết lập thông tin</Text>
          <View style={styles.spacer} />
        </View>

        {/* Progress */}
        <View style={styles.progressSection}>
          <Text style={styles.progressText}>Bước {currentStep} / 2</Text>
          <View style={styles.progressBar}>
            <View
              style={[
                styles.progressFill,
                { width: `${(currentStep / 2) * 100}%` },
              ]}
            />
          </View>
        </View>

        {/* Content */}
        {currentStep === 1 ? renderStep1() : renderStep2()}

        {/* Footer Buttons */}
        <View style={styles.footer}>
          {currentStep > 1 && (
            <TouchableOpacity
              style={[styles.footerButton, styles.backButton]}
              onPress={() => setCurrentStep(1)}
            >
              <Text style={styles.backText}>← Quay lại</Text>
            </TouchableOpacity>
          )}

          <TouchableOpacity
            style={[styles.footerButton, styles.nextButton]}
            onPress={() => {
              if (currentStep === 1) {
                if (validateStep1()) {
                  setCurrentStep(2);
                }
              } else {
                handleComplete();
              }
            }}
          >
            <Text style={styles.nextText}>
              {currentStep === 1 ? 'Tiếp tục →' : '✓ Hoàn thành'}
            </Text>
          </TouchableOpacity>
        </View>
      </View>
    </Modal>
  );
};
export default SetupInfoModal;
const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5',
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingHorizontal: 20,
    paddingVertical: 16,
    backgroundColor: '#fff',
    borderBottomWidth: 1,
    borderBottomColor: '#e0e0e0',
  },
  closeButton: {
    padding: 8,
  },
  closeText: {
    fontSize: 16,
    color: '#666',
  },
  headerTitle: {
    fontSize: 20,
    fontWeight: '600',
    color: '#333',
  },
  spacer: {
    width: 50,
  },
  progressSection: {
    backgroundColor: '#fff',
    paddingHorizontal: 20,
    paddingVertical: 16,
  },
  progressText: {
    fontSize: 16,
    color: '#666',
    textAlign: 'center',
    marginBottom: 12,
  },
  progressBar: {
    height: 6,
    backgroundColor: '#e0e0e0',
    borderRadius: 3,
    overflow: 'hidden',
  },
  progressFill: {
    height: '100%',
    backgroundColor: '#4CAF50',
    borderRadius: 3,
  },
  content: {
    flex: 1,
    paddingHorizontal: 20,
    paddingTop: 20,
  },
  stepTitle: {
    fontSize: 24,
    fontWeight: '700',
    color: '#333',
    textAlign: 'center',
    marginBottom: 30,
  },
  section: {
    marginBottom: 30,
  },
  twoColumnSection: {
    flexDirection: 'row',
    gap: 15,
    marginBottom: 30,
  },
  halfSection: {
    flex: 1,
  },
  label: {
    fontSize: 18,
    fontWeight: '600',
    color: '#333',
    marginBottom: 8,
  },
  subtitle: {
    fontSize: 14,
    color: '#666',
    marginBottom: 15,
  },
  dateInput: {
    backgroundColor: '#fff',
    borderWidth: 2,
    borderColor: '#e0e0e0',
    borderRadius: 12,
    paddingHorizontal: 16,
    paddingVertical: 16,
  },
  dateText: {
    fontSize: 18,
    color: '#333',
  },
  genderRow: {
    flexDirection: 'row',
    gap: 12,
  },
  genderButton: {
    flex: 1,
    backgroundColor: '#fff',
    borderWidth: 2,
    borderColor: '#e0e0e0',
    borderRadius: 12,
    paddingVertical: 16,
    alignItems: 'center',
  },
  selectedGender: {
    backgroundColor: '#4CAF50',
    borderColor: '#4CAF50',
  },
  genderText: {
    fontSize: 18,
    fontWeight: '500',
    color: '#666',
  },
  selectedGenderText: {
    color: '#fff',
  },
  numberInput: {
    backgroundColor: '#fff',
    borderWidth: 2,
    borderColor: '#e0e0e0',
    borderRadius: 12,
    paddingHorizontal: 16,
    paddingVertical: 16,
    fontSize: 18,
    textAlign: 'center',
  },
  bmiSection: {
    alignItems: 'center',
    marginBottom: 30,
  },
  bmiTitle: {
    fontSize: 16,
    color: '#666',
    marginBottom: 12,
  },
  bmiCard: {
    backgroundColor: '#E8F5E8',
    paddingHorizontal: 24,
    paddingVertical: 16,
    borderRadius: 12,
    alignItems: 'center',
  },
  bmiValue: {
    fontSize: 28,
    fontWeight: '700',
    color: '#2E7D32',
    marginBottom: 4,
  },
  bmiStatus: {
    fontSize: 16,
    color: '#2E7D32',
    fontWeight: '500',
  },
  checkboxGrid: {
    gap: 12,
  },
  checkboxItem: {
    backgroundColor: '#fff',
    borderWidth: 2,
    borderColor: '#e0e0e0',
    borderRadius: 12,
    paddingHorizontal: 16,
    paddingVertical: 16,
  },
  checkedItem: {
    backgroundColor: '#E3F2FD',
    borderColor: '#2196F3',
  },
  checkboxText: {
    fontSize: 16,
    color: '#666',
    textAlign: 'center',
  },
  checkedText: {
    color: '#1976D2',
    fontWeight: '500',
  },
  medicationForm: {
    backgroundColor: '#fff',
    borderRadius: 12,
    padding: 16,
    marginBottom: 16,
  },
  textInput: {
    borderWidth: 2,
    borderColor: '#e0e0e0',
    borderRadius: 8,
    paddingHorizontal: 12,
    paddingVertical: 12,
    fontSize: 16,
    backgroundColor: '#fff',
    marginBottom: 12,
  },
  medicationTypeRow: {
    marginBottom: 12,
  },
  miniLabel: {
    fontSize: 14,
    color: '#666',
    marginBottom: 8,
  },
  typeButtons: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: 8,
  },
  typeButton: {
    backgroundColor: '#f5f5f5',
    borderWidth: 1,
    borderColor: '#ddd',
    borderRadius: 20,
    paddingHorizontal: 12,
    paddingVertical: 6,
  },
  selectedType: {
    backgroundColor: '#FF9800',
    borderColor: '#FF9800',
  },
  typeText: {
    fontSize: 14,
    color: '#666',
  },
  selectedTypeText: {
    color: '#fff',
  },
  dosageRow: {
    flexDirection: 'row',
    gap: 12,
  },
  dosageInput: {
    flex: 1,
    marginBottom: 0,
  },
  addMedButton: {
    backgroundColor: '#4CAF50',
    borderRadius: 8,
    paddingVertical: 12,
    alignItems: 'center',
    marginTop: 8,
  },
  addMedButtonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: '500',
  },
  medicationCard: {
    backgroundColor: '#fff',
    borderRadius: 12,
    padding: 16,
    marginBottom: 12,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
  },
  medInfo: {
    flex: 1,
  },
  medName: {
    fontSize: 16,
    fontWeight: '500',
    color: '#333',
    marginBottom: 4,
  },
  medDetails: {
    fontSize: 14,
    color: '#666',
  },
  removeButton: {
    backgroundColor: '#f44336',
    borderRadius: 6,
    paddingHorizontal: 12,
    paddingVertical: 6,
  },
  removeText: {
    color: '#fff',
    fontSize: 14,
  },
  allergyInputRow: {
    flexDirection: 'row',
    gap: 12,
    marginBottom: 16,
  },
  allergyInput: {
    flex: 1,
    marginBottom: 0,
  },
  addAllergyButton: {
    backgroundColor: '#FF9800',
    borderRadius: 8,
    paddingHorizontal: 16,
    justifyContent: 'center',
  },
  addAllergyText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: '500',
  },
  allergyTags: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: 8,
  },
  allergyTag: {
    backgroundColor: '#FFF3E0',
    borderWidth: 1,
    borderColor: '#FFB74D',
    borderRadius: 20,
    paddingHorizontal: 12,
    paddingVertical: 6,
    flexDirection: 'row',
    alignItems: 'center',
  },
  allergyTagText: {
    fontSize: 14,
    color: '#E65100',
    marginRight: 8,
  },
  removeTagButton: {
    backgroundColor: '#f44336',
    borderRadius: 10,
    width: 20,
    height: 20,
    justifyContent: 'center',
    alignItems: 'center',
  },
  removeTagText: {
    color: '#fff',
    fontSize: 12,
    fontWeight: '600',
  },
  smokingRow: {
    flexDirection: 'row',
    gap: 12,
  },
  smokingButton: {
    flex: 1,
    backgroundColor: '#fff',
    borderWidth: 2,
    borderColor: '#e0e0e0',
    borderRadius: 12,
    paddingVertical: 16,
    alignItems: 'center',
  },
  selectedSmoking: {
    backgroundColor: '#9C27B0',
    borderColor: '#9C27B0',
  },
  smokingText: {
    fontSize: 16,
    fontWeight: '500',
    color: '#666',
  },
  selectedSmokingText: {
    color: '#fff',
  },
  footer: {
    flexDirection: 'row',
    paddingHorizontal: 20,
    paddingVertical: 20,
    backgroundColor: '#fff',
    borderTopWidth: 1,
    borderTopColor: '#e0e0e0',
    gap: 12,
  },
  footerButton: {
    flex: 1,
    paddingVertical: 16,
    borderRadius: 12,
    alignItems: 'center',
  },
  backButton: {
    backgroundColor: '#9E9E9E',
  },
  backText: {
    color: '#fff',
    fontSize: 18,
    fontWeight: '600',
  },
  nextButton: {
    backgroundColor: '#4CAF50',
  },
  nextText: {
    color: '#fff',
    fontSize: 18,
    fontWeight: '600',
  },
});
